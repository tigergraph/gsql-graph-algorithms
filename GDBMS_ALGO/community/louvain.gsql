CREATE TEMPLATE QUERY GDBMS_ALGO.community.louvain(
  SET<STRING> v_type_set,
  SET<STRING> e_type_set,
  STRING weight_attribute = "weight",
  UINT total_passes_count = 3, 
  UINT maximum_iteration = 10,
  UINT total_batch_count = 12,
  STRING result_attribute = "",
  STRING file_path = ""
) SYNTAX V2 {

    /*
    First Author: xuanlei.lin@tigergraph.com
    First Commit Date: 2024-07-16

    Recent Author: xuanlei.lin@tigergraph.com
    Recent Commit Date: 2024-07-16

    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Community

    Maturity:
        Production

    Description: 
        Louvain community detection algorithm.

    Publications:
        https://arxiv.org/abs/0803.0476
        http://www.ijcee.org/vol8/927-A023.pdf

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/community-algorithms/louvain

    Parameters:
        v_type_set:
            The set of vertex types to traverse.
        e_type_set:
            The set of edge types to traverse.
        weight_attribute:
            The attribute name for edge weights of type DOUBLE (use an empty string if the graph is unweighted).
            Note: When there is a weight attribute mismatch, there may not be an explicit error message.
        total_passes_count:
            The total number of passes for the Louvain algorithm.
        maximum_iteration:
            The maximum number of iterations for each pass of the Louvain algorithm.
        total_batch_count:
            The number of batches. Using batches reduces memory consumption.
        result_attribute:
            If not empty, store community ID values (INT) in this attribute.
        file_path:
            The file to write CSV output to.
    */

  TYPEDEF TUPLE <DOUBLE delta_Q_add, VERTEX community> MyTuple;
  SumAccum<DOUBLE> @@m; // The sum of the weights of all the links in the network.
  MinAccum<VERTEX> @community_id; // The community ID of the node.
  SumAccum<DOUBLE> @k; // The sum of the weights of the links incident to the node.
  SumAccum<DOUBLE> @k_in; // The sum of the weights of the links inside the previous community of the node.
  SumAccum<DOUBLE> @k_self_loop; // The weight of the self-loop link.
  MapAccum<VERTEX, SumAccum<DOUBLE>> @community_k_in_map; // Community of the neighbors of the nodes -> Sum of the weights of the links inside the community.
  MapAccum<VERTEX, SumAccum<DOUBLE>> @@community_sum_total_map; // Community ID C -> Sum of the weights of the links incident to nodes in C.
  SumAccum<DOUBLE> @community_sum_total; // Sum of the weights of the links incident to nodes in the community of the node.
  MapAccum<VERTEX, SumAccum<DOUBLE>> @@community_sum_in_map; // Community ID -> Sum of the weights of the links inside the community.
  MapAccum<VERTEX, MapAccum<VERTEX, SumAccum<DOUBLE>>> @@source_target_k_in_map; // Source community ID -> (Target community ID -> Sum of the weights of the links from the source community to the target community).
  SumAccum<DOUBLE> @delta_Q_remove; // Delta Q to remove the node from the previous community.
  MaxAccum<MyTuple> @best_move; // Best move of the node with the highest delta Q to move the isolated node into the new community.
  MaxAccum<DOUBLE> @@min_double; // Used to reset the @best_move.
  OrAccum @to_change_community;
  SumAccum<INT> @batch_id;
  SumAccum<INT> @vid;
  FILE f(file_path);

  // Virtual edges
  CREATE DIRECTED VIRTUAL EDGE belongs_to (FROM *, TO *, layer_set SET<INT>);
  CREATE UNDIRECTED VIRTUAL EDGE links_to (FROM *, TO *, layer_weight_map MAP<INT, DOUBLE>);

  // -------------------- 1. First pass --------------------
  // Initialization
  All_Nodes = {v_type_set};
  Pass_Nodes = SELECT s
               FROM   All_Nodes:s -(e_type_set:e)- :t
               ACCUM  @@m += e.getAttr(weight_attribute, "DOUBLE") / 2,
                      s.@k += e.getAttr(weight_attribute, "DOUBLE"),
                      IF s == t THEN // Self-loop link
                        s.@k_self_loop += e.getAttr(weight_attribute, "DOUBLE")
                      END
               POST-ACCUM
                      s.@community_id = s,
                      s.@vid = getvid(s),
                      s.@batch_id = s.@vid % total_batch_count;
  IF @@m < 0.00000000001 THEN
    RETURN;
  END;

  // Local moving
  INT hop = 0;
  Candidates (ANY) = Pass_Nodes;
  WHILE Candidates.size() > 0 AND hop < maximum_iteration DO
    hop = hop + 1;
    IF hop == 1 THEN // First iteration
      ChangedNodes = SELECT s
                     FROM   Candidates:s -(e_type_set:e)- :t
                     WHERE  s.@community_id != t.@community_id
                     ACCUM  s.@best_move += MyTuple(1 - s.@k * t.@k / (2 * @@m), t.@community_id)
                     POST-ACCUM
                            IF s.@best_move.delta_Q_add > 0 THEN // The gain (delta Q) is positive
                              s.@to_change_community = TRUE
                            END
                     HAVING s.@to_change_community == TRUE;
    ELSE // Remaining iterations
      // Calculate sum_total
      Tmp = SELECT s
            FROM   Pass_Nodes:s
            POST-ACCUM
                   @@community_sum_total_map += (s.@community_id -> s.@k);
      Tmp = SELECT s
            FROM   Pass_Nodes:s
            POST-ACCUM
                   s.@community_sum_total = @@community_sum_total_map.get(s.@community_id);
      @@community_sum_total_map.clear();
      // Find the best move
      ChangedNodes = {};
      FOREACH batch_id IN RANGE[0, total_batch_count-1] DO
        // Calculate the delta Q to remove the node from the previous community
        Nodes = SELECT s
                FROM   Candidates:s -(e_type_set:e)- :t
                WHERE  s.@batch_id == batch_id
                ACCUM  IF s.@community_id == t.@community_id THEN
                         s.@k_in += e.getAttr(weight_attribute, "DOUBLE")
                       ELSE
                         s.@community_k_in_map += (t.@community_id -> e.getAttr(weight_attribute, "DOUBLE"))
                       END
                POST-ACCUM
                       s.@delta_Q_remove = 2 * s.@k_self_loop - 2 * s.@k_in + s.@k * (s.@community_sum_total - s.@k) / @@m,
                       s.@k_in = 0,
                       s.@best_move = MyTuple(@@min_double, s); // Reset the delta_Q_add
        // Find the best move
        Nodes = SELECT s
                FROM   Nodes:s -(e_type_set:e)- :t
                WHERE  s.@community_id != t.@community_id
                ACCUM  DOUBLE delta_Q_add = 2 * s.@community_k_in_map.get(t.@community_id) - s.@k * t.@community_sum_total / @@m,
                       s.@best_move += MyTuple(delta_Q_add, t.@community_id)
                POST-ACCUM
                       IF s.@delta_Q_remove + s.@best_move.delta_Q_add > 0 THEN // The gain (delta Q) is positive
                         s.@to_change_community = TRUE
                       END,
                       s.@community_k_in_map.clear()
                HAVING s.@to_change_community == TRUE;
        ChangedNodes = ChangedNodes UNION Nodes;
      END;
    END;
    // If two nodes swap, only change the community of one of them
    SwapNodes = SELECT s
                FROM   ChangedNodes:s -(e_type_set:e)- :t
                WHERE  s.@best_move.community == t.@community_id
                       AND t.@to_change_community == TRUE
                       AND t.@best_move.community == s.@community_id
                       // Only change the one with larger delta Q or the one with smaller @vid if delta Q are the same
                       AND (s.@delta_Q_remove + s.@best_move.delta_Q_add < t.@delta_Q_remove + t.@best_move.delta_Q_add
                            OR (abs((s.@delta_Q_remove + s.@best_move.delta_Q_add) - (t.@delta_Q_remove + t.@best_move.delta_Q_add)) < 0.00000000001
                                AND s.@vid > t.@vid))
                POST-ACCUM
                       s.@to_change_community = FALSE;
    ChangedNodes = ChangedNodes MINUS SwapNodes;
    // Place each node of ChangedNodes in the community in which the gain is maximum
    ChangedNodes = SELECT s
                   FROM   ChangedNodes:s
                   POST-ACCUM
                          s.@community_id = s.@best_move.community,
                          s.@to_change_community = FALSE;
    // Get all neighbours of the changed node that do not belong to the nodeâ€™s new community
    Candidates = SELECT t
                 FROM   ChangedNodes:s -(e_type_set:e)- :t
                 WHERE  t.@community_id != s.@community_id;
  END;

  // Coarsening
  UINT new_layer = 0;
  @@community_sum_total_map.clear();
  Tmp = SELECT s
        FROM   Pass_Nodes:s -(e_type_set:e)- :t
        ACCUM  IF s.@community_id == t.@community_id THEN
                 @@community_sum_in_map += (s.@community_id -> e.getAttr(weight_attribute, "DOUBLE"))
               END
        POST-ACCUM
               VERTEX cid = s.@community_id,
               INSERT INTO belongs_to VALUES(s, cid, new_layer),
               IF @@community_sum_in_map.containsKey(s) THEN
                 INSERT INTO links_to VALUES(s, s, (new_layer -> @@community_sum_in_map.get(s)))
               END;
  @@community_sum_in_map.clear();
  Tmp = SELECT s
        FROM   Pass_Nodes:s -(e_type_set:e)- :t
        ACCUM  IF s.@community_id != t.@community_id THEN
                 @@source_target_k_in_map += (s.@community_id -> (t.@community_id -> e.getAttr(weight_attribute, "DOUBLE")))
               END
        POST-ACCUM
               IF @@source_target_k_in_map.containsKey(s) THEN
                 FOREACH (target_community, k_in) IN @@source_target_k_in_map.get(s) DO
                   INSERT INTO links_to VALUES(s, target_community, (new_layer -> k_in))
                 END
               END;
  @@source_target_k_in_map.clear();

  // -------------------- 2. Remaining passes --------------------
  SumAccum<INT> @@sum;
  INT layer = 0;
  WHILE layer < total_passes_count - 1 DO
    // Reset
    Tmp = SELECT s
          FROM   Pass_Nodes:s -(links_to:e)- :t
          ACCUM  @@sum += 1
          POST-ACCUM // Reset
                 s.@k = 0,
                 s.@k_in = 0,
                 s.@k_self_loop = 0,
                 s.@best_move = MyTuple(@@min_double, s);
    // Initialization
    Pass_Nodes = SELECT s
                 FROM   Pass_Nodes:s -(links_to:e)- :t
                 WHERE  e.layer_weight_map.containsKey(layer)
                 ACCUM  DOUBLE weight = e.layer_weight_map.get(layer),
                        s.@k += weight,
                        IF s == t THEN // Self-loop link
                          s.@k_self_loop += weight
                        END
                 POST-ACCUM
                        s.@community_id = s;
    IF @@m < 0.00000000001 THEN
      PRINT "Warning: the sum of the weights in the edges should be greater than zero!";
      RETURN;
    END;

    // Local moving
    INT hop = 0;
    Candidates = Pass_Nodes;
    WHILE Candidates.size() > 0 AND hop < maximum_iteration DO
      hop = hop + 1;
      IF hop == 1 THEN // First iteration
        ChangedNodes = SELECT s
                       FROM   Candidates:s -(links_to:e)- :t
                       WHERE  e.layer_weight_map.containsKey(layer)
                              AND s.@community_id != t.@community_id
                       ACCUM  s.@best_move += MyTuple(1 - s.@k * t.@k / (2 * @@m), t.@community_id)
                       POST-ACCUM
                              IF s.@best_move.delta_Q_add > 0 THEN // The gain (delta Q) is positive
                                s.@to_change_community = TRUE
                              END
                       HAVING s.@to_change_community == TRUE;
      ELSE // Remaining iterations
        // Calculate sum_total
        Tmp = SELECT s
              FROM   Pass_Nodes:s
              POST-ACCUM
                     @@community_sum_total_map += (s.@community_id -> s.@k);
        Tmp = SELECT s
              FROM   Pass_Nodes:s
              POST-ACCUM
                     s.@community_sum_total = @@community_sum_total_map.get(s.@community_id);
        @@community_sum_total_map.clear();
        // Find the best move
        ChangedNodes = {};
        // Calculate the delta Q to remove the node from the previous community
        Nodes = SELECT s
                FROM   Candidates:s -(links_to:e)- :t
                WHERE  e.layer_weight_map.containsKey(layer)
                ACCUM  DOUBLE weight = e.layer_weight_map.get(layer),
                    IF s.@community_id == t.@community_id THEN
                        s.@k_in += weight
                    ELSE
                        s.@community_k_in_map += (t.@community_id -> weight)
                    END
                POST-ACCUM
                    s.@delta_Q_remove = 2 * s.@k_self_loop - 2 * s.@k_in + s.@k * (s.@community_sum_total - s.@k) / @@m,
                    s.@k_in = 0,
                    s.@best_move = MyTuple(@@min_double, s); // Reset the delta_Q_add
        // Find the best move
        Nodes = SELECT s
                FROM   Nodes:s -(links_to:e)- :t
                WHERE  e.layer_weight_map.containsKey(layer)
                    AND s.@community_id != t.@community_id
                ACCUM  DOUBLE delta_Q_add = 2 * s.@community_k_in_map.get(t.@community_id) - s.@k * t.@community_sum_total / @@m,
                    s.@best_move += MyTuple(delta_Q_add, t.@community_id)
                POST-ACCUM
                    IF s.@delta_Q_remove + s.@best_move.delta_Q_add > 0 THEN // The gain (delta Q) is positive
                        s.@to_change_community = TRUE
                    END,
                    s.@community_k_in_map.clear()
                HAVING s.@to_change_community == TRUE;
        ChangedNodes = ChangedNodes UNION Nodes;
      END;
      // If two nodes swap, only change the community of one of them
      SwapNodes = SELECT s
                  FROM   ChangedNodes:s -(links_to:e)- :t
                  WHERE  e.layer_weight_map.containsKey(layer)
                         AND s.@best_move.community == t.@community_id
                         AND t.@to_change_community == TRUE
                         AND t.@best_move.community == s.@community_id
                         // Only change the one with larger delta Q or the one with smaller @vid if delta Q are the same
                         AND (s.@delta_Q_remove + s.@best_move.delta_Q_add < t.@delta_Q_remove + t.@best_move.delta_Q_add
                              OR (abs((s.@delta_Q_remove + s.@best_move.delta_Q_add) - (t.@delta_Q_remove + t.@best_move.delta_Q_add)) < 0.00000000001
                                  AND s.@vid > t.@vid))
                  POST-ACCUM
                         s.@to_change_community = FALSE;
      ChangedNodes = ChangedNodes MINUS SwapNodes;
      // Place each node of ChangedNodes in the community in which the gain is maximum
      ChangedNodes = SELECT s
                     FROM   ChangedNodes:s
                     POST-ACCUM
                            s.@community_id = s.@best_move.community,
                            s.@to_change_community = FALSE;
      // Get all neighbours of the changed node that do not belong to the nodeâ€™s new community
      Candidates = SELECT t
                   FROM   ChangedNodes:s -(links_to:e)- :t
                   WHERE  e.layer_weight_map.containsKey(layer)
                          AND t.@community_id != s.@community_id;
    END;

    // Coarsening
    UINT new_layer = layer + 1;
    @@community_sum_total_map.clear();
    Tmp = SELECT s
          FROM   Pass_Nodes:s -(links_to:e)- :t
          WHERE  e.layer_weight_map.containsKey(layer)
          ACCUM  IF s.@community_id == t.@community_id THEN
                   DOUBLE weight = e.layer_weight_map.get(layer),
                   @@community_sum_in_map += (s.@community_id -> weight)
                 END
          POST-ACCUM
                 VERTEX cid = s.@community_id,
                 INSERT INTO belongs_to VALUES(s, cid, new_layer),
                 IF @@community_sum_in_map.containsKey(s) THEN
                   INSERT INTO links_to VALUES(s, s, (new_layer -> @@community_sum_in_map.get(s)))
                 END;
    @@community_sum_in_map.clear();
    Tmp = SELECT s
          FROM   Pass_Nodes:s -(links_to:e)- :t
          WHERE  e.layer_weight_map.containsKey(layer)
          ACCUM  DOUBLE weight = e.layer_weight_map.get(layer),
                 IF s.@community_id != t.@community_id THEN
                   @@source_target_k_in_map += (s.@community_id -> (t.@community_id -> weight))
                 END
          POST-ACCUM
                 IF @@source_target_k_in_map.containsKey(s) THEN
                   FOREACH (target_community, k_in) IN @@source_target_k_in_map.get(s) DO
                     INSERT INTO links_to VALUES(s, target_community, (new_layer -> k_in))
                   END
                 END;
    @@source_target_k_in_map.clear();
    layer = layer + 1;
  END;

  // -------------------- 3. Final community and output --------------------
  // Top layer
  layer = total_passes_count - 1;
  Nodes = SELECT s
          FROM   All_Nodes:s -(belongs_to>:e)- :t
          WHERE  layer IN e.layer_set
          ACCUM  s.@community_id = t;

  // Other layers
  WHILE Nodes.size() > 0 AND layer > 0 DO
    layer = layer - 1;
    Nodes = SELECT s
            FROM   All_Nodes:s -(belongs_to>:e)- :t
            WHERE  layer IN e.layer_set
            ACCUM  s.@community_id = t.@community_id;
  END;

  // Output results
  Nodes = SELECT s
          FROM All_Nodes:s
          POST-ACCUM
            IF result_attribute != "" THEN
                s.setAttr(result_attribute, getvid(s.@community_id))
            END,
            IF file_path != "" THEN
              VERTEX node = s.@community_id,
              f.println(s.type, s, node.type, node)
            END;
}
