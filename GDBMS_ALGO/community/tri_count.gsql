CREATE TEMPLATE QUERY GDBMS_ALGO.community.tri_count(STRING v_type, STRING e_type)  SYNTAX V1 {

/*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Community

    Maturity:
        Production

    Description: 
        This algorithm uses the classic edge-iterator method to count triangles. It is slower than the fast version, but uses less memory.

    Publications:
        NA

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/community-algorithms/triangle-counting

    Parameters:
        v_type:
            Vertex type to count
        e_type:
            Edge type to traverse
    */

# Compute the total number of triangles in the GRAPH. No input parameters are needed.
SumAccum<INT> @@sum_cnt;
SetAccum<VERTEX> @self_set;

all = {v_type};
all = SELECT s
      FROM all:s 
      ACCUM s.@self_set += s;

# For each edge e, the number of triangles that contain e is equivalent
# to the number of common neighbors between vertices s and t 
        
tmp = SELECT t
      FROM all:s -(e_type:e) -:t
      WHERE getvid(s) > getvid(t)
      ACCUM INT c1 = COUNT(s.neighbors(e_type) MINUS s.@self_set),
            INT c2 = COUNT((s.neighbors(e_type) MINUS s.@self_set) MINUS (t.neighbors(e_type) MINUS t.@self_set)),
            @@sum_cnt += c1-c2;
                            
# Each triangle is counted 3 times for each edge, so final result is divided by 3
PRINT @@sum_cnt/3 AS num_triangles;
}
