CREATE TEMPLATE QUERY GDBMS_ALGO.community.tri_count_fast(STRING v_type, STRING e_type)  SYNTAX V1 {

    /*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Community

    Maturity:
        Production

    Description: 
        The fast version of the Triangle Counting algorithm is faster than the standard version, but uses some additional memory.

    Publications:
        NA

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/community-algorithms/triangle-counting

    Parameters:
        v_type:
            Vertex type to count
        e_type:
            Edge type to traverse
    */

# Compute the total number of triangles in the graph
# This algorithm is faster than tri_count but uses additional memory for temporary storage
SumAccum<INT> @@sum_cnt;
SetAccum<VERTEX> @neighbors_set;
//SumAccum<INT> @sum_outdegree;
all = {v_type};

# We build up our neighbor lists manually because we'll only build them up on the 2 smaller vertices on a triangle. 

tmp = SELECT t
      FROM all:s-(e_type)- v_type:t
      WHERE getvid(s) > getvid(t)
      ACCUM t.@neighbors_set += s;

# Here we compute the intersection for 2 points on the triangle.
tmp = SELECT t
      FROM all:s-(e_type)- :t
      WHERE getvid(s) > getvid(t)
      ACCUM @@sum_cnt += COUNT(s.@neighbors_set INTERSECT t.@neighbors_set);
                   
# print result
PRINT @@sum_cnt AS num_triangles;

}
