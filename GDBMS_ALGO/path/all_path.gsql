CREATE TEMPLATE QUERY GDBMS_ALGO.path.all_path(VERTEX v_source, VERTEX target_v, INT depth = 10,
  BOOL print_results = TRUE, STRING file_path = "")SYNTAX v1 {

    /*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Path

    Maturity:
        production

    Description: 
        Finds all paths between two vertices in a directed graph.

    Publications:
        NA

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/pathfinding-algorithms/single-pair-all-paths

    Parameters:
        v_source:
            source vertex
        target_v:
            target vertex
        depth:
            maxmium path length is 2*depth
        print_results:
            If True, print JSON output
        file_path:
            file to write CSV output to
    */

  /*This algorithm is to find all path between two vertex
  
  Parameters:
  v_source: source vertex                 
  target_v: target vertex  
  depth: maxmium path length
  print_results: print JSON output    
  file_path: file to write CSV output to
  
  */
  ListAccum<ListAccum<VERTEX>> @path_list; 
  ListAccum<ListAccum<VERTEX>> @new_list;
  OrAccum @end_point;
  ListAccum<ListAccum<VERTEX>> @@total_path_list; // print all path as List
  FILE f (file_path);
  // 1. mark the target node as true
  endset = {target_v};
  endset = SELECT s
          From endset:s
          ACCUM s.@end_point = true;
  
  // 2. start from the initial node, save the node to the patt_list, and find all nodes connected through the given name
  Source = {v_source};
  Source = SELECT s 
           FROM Source:s
           ACCUM s.@path_list = [s];
  
  WHILE Source.size() > 0 LIMIT depth DO 
       Source = SELECT t 
                 FROM Source:s -(:e)- :t
                 ACCUM 
                 FOREACH sequence IN s.@path_list DO 
                   IF t.@end_point == true THEN
                     @@total_path_list += [sequence + [t]],
                     IF file_path != "" THEN 
                                   f.println([sequence + [t]]) 
                     END
                   ELSE IF sequence.contains(t) == FALSE THEN
                     t.@new_list += [sequence + [t]]  
                   END
                 END
        POST-ACCUM s.@path_list.clear();
  
      Source = SELECT t 
                FROM Source:t    
                POST-ACCUM t.@path_list = t.@new_list,
                           t.@new_list.clear()
                HAVING t.@path_list.size() > 0;
  END;
  // 3. return the final result
  IF print_results THEN
      PRINT @@total_path_list as path;
  END;  
}
