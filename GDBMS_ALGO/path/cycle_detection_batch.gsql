CREATE TEMPLATE QUERY GDBMS_ALGO.path.cycle_detection_batch (SET<STRING> v_type_set, SET<STRING> e_type_set, INT batch_num,
             INT depth, BOOL print_results = TRUE, STRING file_path = "")SYNTAX v1{

    /*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Path

    Maturity:
        production

    Description: 
        Rochaâ€“Thatte cycle detection algorithm + fixes
        This is a distributed algorithm for detecting all the cycles on large-scale directed graphs.In every iteration, the vertices send its sequences to its out-neighbors, and receive the sequences from the in-neighbors.
        Stop passing the sequence (v1,v2,v3, ...) when:
            1. v = v1. If v has the minimum label in the sequence, report the cycle
            2. v = vi (i!=1). Do not report since this cycle is already reported in an earlier iteration

    Publications:
        https://en.wikipedia.org/wiki/Rocha%E2%80%93Thatte_cycle_detection_algorithm

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/pathfinding-algorithms/cycle-detection

    Parameters:
        v_type_set:
            Names of vertex types to use
        e_type_set:
            Names of edge types to use
        batch_num:
            Number of batches to partition by
        depth:
            Maximum cycle length to search for, equal to the maximum number of iterations
        print_results:
            If True, output JSON to standard output
        file_path:
            If not empty, write output to this file.
    */

  ListAccum<ListAccum<VERTEX>> @curr_list, @new_list;
  ListAccum<ListAccum<VERTEX>> @@cycles_list;
  SumAccum<INT> @sum_uid;
  FILE f (file_path);

  # initialization

  all = {v_type_set};
  FOREACH batch_number in RANGE[0,batch_num-1] DO
        Active = SELECT s
                 FROM all:s
                 WHERE getvid(s)%batch_num==batch_number
                 ACCUM s.@curr_list = [s];
        WHILE Active.size() > 0 LIMIT depth DO
            Active = SELECT t
                     FROM Active:s -(e_type_set:e)- :t
                     ACCUM
                         FOREACH sequence IN s.@curr_list DO
                             BOOL t_is_min = TRUE,
                             IF t == sequence.get(0) THEN  # cycle detected
                                 FOREACH v IN sequence DO
                                     IF getvid(v) < getvid(t) THEN
                                         t_is_min = FALSE,
                                         BREAK
                                     END
                                 END,
                                 IF t_is_min == TRUE THEN  # if it has the minimal label in the list, report
                                     IF print_results THEN
                                        @@cycles_list += sequence
                                     END,
                                     IF file_path != "" THEN
                                        f.println(sequence)
                                     END
                                 END
                             ELSE IF sequence.contains(t) == FALSE THEN   # discard the sequences contain t
                                 t.@new_list += [sequence + [t]]   # store sequences in @newList to avoid confliction with @currList
                             END
                        END
                    POST-ACCUM s.@curr_list.clear();
            Active = SELECT t FROM Active:t POST-ACCUM
                               t.@curr_list = t.@new_list,
                               t.@new_list.clear()
                    HAVING t.@curr_list.size() > 0;  # IF receive no sequences, deactivate it;
        END;
        clear_set = SELECT s FROM all:s POST-ACCUM s.@curr_list.clear(),s.@new_list.clear();
  END;
  IF print_results THEN
      PRINT @@cycles_list as cycles;
  END;
}
