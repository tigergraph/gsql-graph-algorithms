CREATE DISTRIBUTED QUERY tg_article_rank (STRING v_type, STRING e_type,
    FLOAT max_change = 0.001, INT maximum_iteration = 25, FLOAT damping = 0.85, INT top_k = 100,
    BOOL print_results = TRUE, STRING result_attribute =    "", STRING file_path = "") SYNTAX V1 {
 
    /*
    First Author: karimsaraipour
    First Commit Date: Oct 4, 2021

    Recent Author: abdullaTigerGraph
    Recent Commit Date: Apr 4, 2022


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Centrality

    Maturity:
        Production

    Description: 
        Compute the article rank score for each vertex in the GRAPH
        In each iteration, compute a score for each vertex:
            score = (1-damping) + damping*average outdegree*sum(received scores FROM its neighbors/average outdegree+Outdegree).
        The article Rank algorithm stops when either of the following is true:
        a) it reaches maximum_iteration iterations;
        b) the max score change for any vertex compared to the last iteration <= max_change.

        This query supports only taking in a single edge for the time being (8/13/2020).

    Publications:
        https://www.emerald.com/insight/content/doi/10.1108/00012530911005544/full/html

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/centrality-algorithms/article-rank

    Parameters:
        v_type:
            vertex types to traverse
        print_results:
            If True, print JSON output
        e_type:
            edge types to traverse
        result_attribute:
            INT attribute to store results to
        maximum_iteration:
            max #iterations
        file_path:
            file to write CSV output to
        top_k:
            #top scores to output
        display_edges:
            output edges for visualization
        max_change:
            max allowed change between iterations to achieve convergence
        damping:
            importance of traversal vs. random teleport
    */


    TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
    HeapAccum<Vertex_Score>(top_k, score DESC) @@top_scores_heap;
    MaxAccum<FLOAT> @@max_diff = 9999;  # max score change in an iteration
    SumAccum<FLOAT> @sum_recvd_score = 0; # sum of scores each vertex receives FROM neighbors
    SumAccum<FLOAT> @sum_score = 0.15;  # initial score for every vertex is 0.15.
    SetAccum<EDGE> @@edge_Set;  # list of all edges, if display is needed
    AvgAccum @@avg_out;
    SumAccum<INT> @sum_out_degree;
    FILE f (file_path);

    # PageRank iterations    
    Start = {v_type};   # Start with all vertices of specified type(s)
    Start = SELECT s 
        FROM Start:s 
        ACCUM 
        s.@sum_out_degree += s.outdegree(e_type),
        @@avg_out += s.outdegree(e_type);

    WHILE @@max_diff > max_change 
    LIMIT maximum_iteration DO @@max_diff = 0;

        V = SELECT s 
            FROM Start:s -(e_type:e)- v_type:t
            ACCUM t.@sum_recvd_score += s.@sum_score/(@@avg_out+s.@sum_out_degree) 
            POST-ACCUM 
            s.@sum_score = (1.0-damping) + damping * s.@sum_recvd_score*@@avg_out,
            s.@sum_recvd_score = 0,
            @@max_diff += abs(s.@sum_score - s.@sum_score');

    END; # END WHILE loop

    # Output
    IF file_path != "" THEN
        f.println("Vertex_ID", "article Rank");
    END;

    V = SELECT s 
        FROM Start:s
        POST-ACCUM 
            IF result_attribute != "" THEN 
                s.setAttr(result_attribute, s.@sum_score) 
            END,

            IF file_path != "" THEN 
                f.println(s, s.@sum_score) 
            END,

            IF print_results THEN 
                @@top_scores_heap += Vertex_Score(s, s.@sum_score) 
            END;

    IF print_results THEN
        PRINT @@top_scores_heap;
    END;
}
