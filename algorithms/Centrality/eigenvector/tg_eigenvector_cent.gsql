CREATE QUERY tg_eigenvector_cent(SET<STRING> v_type, SET<STRING> e_type, INT maxIter = 100, FLOAT convLimit = 0.000001,
    INT top_k = 100, BOOL print_accum = True, STRING result_attr = "",STRING file_path = ""
    ) SYNTAX V1 {
    
    /* Compute eigenvector Centrality for each VERTEX. 
    Parameters:
    v_type: vertex types to traverse                 
    e_type: edge types to traverse                   
    maxIter: max iteration
    convLimit: convergence limitation
    top_k: report only this many top scores          print_accum: weather print the result
    result_attr: attribute to write result to        file_path: file to write CSV output to
     */ 
     
    TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
    HeapAccum<Vertex_Score>(top_k, score DESC) @@top_scores_heap;
    SumAccum<FLOAT> @@sum_squares_eigen_values;
    SumAccum<FLOAT> @sum_received_value;
    SumAccum<FLOAT> @sum_eigen_value = 1;
    SumAccum<FLOAT> @@sum_cur_norm_values;
    SumAccum<FLOAT> @@sum_prev_norm_values;
    FLOAT conv_value = 9999;
    FILE f (file_path);
    Start = {v_type};
    WHILE conv_value > convLimit LIMIT maxIter DO
        @@sum_squares_eigen_values = 0;
        @@sum_cur_norm_values = 0;
        V = SELECT s 
            FROM Start:s - (e_type:e) - v_type:t
            ACCUM t.@sum_received_value += s.@sum_eigen_value
            POST-ACCUM s.@sum_eigen_value = s.@sum_received_value,
                       @@sum_squares_eigen_values += s.@sum_eigen_value * s.@sum_eigen_value,
                       s.@sum_received_value = 0;
        p = SELECT s 
            FROM V:s 
            LIMIT 10;
       
        V = SELECT s 
            FROM V:s
            POST-ACCUM s.@sum_eigen_value = s.@sum_eigen_value / sqrt(@@sum_squares_eigen_values),
                       @@sum_cur_norm_values += s.@sum_eigen_value;
        conv_value = abs(@@sum_cur_norm_values - @@sum_prev_norm_values);
        @@sum_prev_norm_values = @@sum_cur_norm_values;
    	                         
    END;
    #Output
    IF file_path != "" THEN
        f.println("Vertex_ID", "egien vector");
    END;
    Start = SELECT s 
            FROM Start:s
            ACCUM 
                IF s.@sum_eigen_value==1.0 THEN 
                    s.@sum_eigen_value+=-1 
                END
	    POST-ACCUM 
	        IF result_attr != "" THEN 
                    s.setAttr(result_attr, s.@sum_eigen_value) 
                END,
      
		IF print_accum THEN 
                    @@top_scores_heap += Vertex_Score(s, s.@sum_eigen_value) 
                END,
      
		IF file_path != "" THEN 
                    f.println(s, s.@sum_eigen_value) 
                END;

    IF print_accum THEN
        PRINT @@top_scores_heap AS top_scores;
    END;

}
