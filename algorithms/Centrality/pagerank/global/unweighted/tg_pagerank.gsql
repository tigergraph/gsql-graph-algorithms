CREATE QUERY tg_pagerank (STRING v_type, STRING e_type, FLOAT max_change=0.001, INT maximum_iteration=25, FLOAT damping=0.85, INT top_k = 100, BOOL normalize=TRUE, BOOL print_results = TRUE, STRING result_attribute =  "", STRING file_path = "", BOOL display_edges = FALSE) SYNTAX V1 {
    /*
    First Author: <unk>
    First Commit Date:  <unk>

    Recent Author: Rob Rossmiller
    Recent Commit Date: Sept 4, 2024


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Centrality

    Maturity:
        Production

    Description: 
        Compute the pageRank score for each vertex in the GRAPH
        In each iteration, compute a score for each vertex:
            score = (1-damping) + damping*sum(received scores FROM its neighbors).
        The pageRank algorithm stops when either of the following is true:
        a) it reaches maximum_iteration iterations;
        b) the max score change for any vertex compared to the last iteration <= max_change.

        This query supports only taking in a single edge for the time being (8/13/2020).

    Publications:
        http://infolab.stanford.edu/~backrub/google.html

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/centrality-algorithms/pagerank

    Parameters:
        v_type:
            vertex types to traverse
        print_results:
            If True, print JSON output
        e_type:
            edge types to traverse
        result_attribute:
            INT attribute to store results to
        file_path:
            file to write CSV output to
        top_k:
            //top scores to output
        display_edges:
            output edges for visualization
        max_change:
            max allowed change between iterations to achieve convergence
        damping:
            importance of traversal vs. random teleport
    */

    TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
    HeapAccum<Vertex_Score>(top_k, score DESC) @@top_scores_heap;
    SetAccum<VERTEX> @@top_vertices;      // vertices with top score
    MaxAccum<FLOAT> @@max_diff = 9999;    // max score change in an iteration
    SumAccum<FLOAT> @sum_recvd_score = 0; // sum of scores each vertex receives FROM neighbors
    SumAccum<FLOAT> @sum_score = 1;       // initial score for every vertex is 1.
    SetAccum<EDGE> @@edge_set;            // list of all edges, if display is needed
    FILE f (file_path);
    INT N=1;


    // PageRank iterations	
    Start = {v_type}; // Start with all vertices of specified type(s)
    IF normalize THEN
        N = Start.size();
        tmp = SELECT s FROM Start:s
              ACCUM s.@sum_score = 1.0/N;
    END;

    WHILE @@max_diff > max_change LIMIT maximum_iteration DO
        @@max_diff = 0;

        V = SELECT s FROM Start:s -(e_type:e)- v_type:t
            ACCUM t.@sum_recvd_score += s.@sum_score/(s.outdegree(e_type)) 
            POST-ACCUM 
                s.@sum_score = (1.0-damping)/N + damping * s.@sum_recvd_score,
                s.@sum_recvd_score = 0,
                @@max_diff += abs(s.@sum_score - s.@sum_score');
    END; 

    // Output
    IF file_path != "" THEN
        f.println("Vertex_ID", "PageRank");
    END;

    V = SELECT s FROM Start:s
        POST-ACCUM 
            IF result_attribute != "" THEN 
                s.setAttr(result_attribute, s.@sum_score) 
            END,

            IF file_path != "" THEN 
                f.println(s, s.@sum_score) 
            END,

            IF print_results THEN 
                @@top_scores_heap += Vertex_Score(s, s.@sum_score) 
            END;

    IF print_results THEN
        PRINT @@top_scores_heap;
        IF display_edges THEN
                   
            FOREACH vert IN @@top_scores_heap DO
                @@top_vertices += vert.Vertex_ID;
            END;
           
            Top = {@@top_vertices};
            Top = SELECT s
                    FROM Top:s -(e_type:e)- v_type:t
                WHERE @@top_vertices.contains(t)
                    ACCUM @@edge_set += e;
            
            PRINT @@edge_set;
            PRINT Top;
        END;
    END;
}
