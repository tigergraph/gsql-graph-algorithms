CREATE DISTRIBUTED QUERY tg_pagerank_pers_ap_batch(STRING v_type, STRING e_type,
  FLOAT max_change=0.001, INT maximum_iteration=25, FLOAT damping = 0.85, INT top_k = 100,INT batch_num,BOOL print_results,STRING file_path) SYNTAX V1 {

    /*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Centrality

    Maturity:
        Production

    Description: 
        Compute the pageRank score for each vertex in the GRAPH

    Publications:
        NA

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/centrality-algorithms/personalized-pagerank

    Parameters:
        v_type:
            vertex types to traverse
        print_results:
            If True, print JSON output
        e_type:
            edge types to traverse
        file_path:
            file to write CSV output to
        top_k:
            #top scores to output
        max_change:
            max allowed change between iterations to achieve convergence
        damping:
            importance of traversal vs. random teleport
    */

  TYPEDEF TUPLE<VERTEX ver, FLOAT score> Vertex_Score;
  HeapAccum<Vertex_Score>(top_k,score DESC) @top_scores_heap;
  MapAccum<Vertex,ListAccum<Vertex_Score>> @@res_map;
  MaxAccum<FLOAT> @@max_diff = 9999; # max score change in an iteration
  MapAccum<VERTEX,FLOAT> @received_score_map; # sum of scores each vertex receives FROM neighbors
  MapAccum<VERTEX,FLOAT> @score_map ;   # Initial score for every vertex is 0
  OrAccum @or_is_source;
  SetAccum<INT> @@end_set;
  FILE f(file_path);
  All = {v_type};#  All with a set of input vertices

  FOREACH batch_count in RANGE[0,batch_num-1] DO
      Start = SELECT s
              FROM All:s
              WHERE getvid(s)%batch_num==batch_count
              ACCUM s.@score_map +=(s->1),   # Only set score of source vertices to 1
                    s.@or_is_source = true;
                    Total = Start;

      WHILE @@max_diff > max_change LIMIT maximum_iteration DO
          V_tmp = SELECT t
                  FROM Start:s -(e_type:e)- :t    # Only update score for activated vertices
                  ACCUM
                      FOREACH (key,value) IN s.@score_map DO
                          IF getvid(key) in @@end_set THEN
                              continue
                          END,
                          FLOAT rec_score = value/s.outdegree(e_type),#/(s.outdegree(e_type);
                          t.@received_score_map += (key->rec_score) END;
          T = Start UNION V_tmp;
          Start = SELECT s
                  FROM T:s
                  POST-ACCUM
                      IF s.@or_is_source == TRUE THEN
                          FLOAT oldscore = s.@score_map.get(s),
                          s.@score_map+=(s->-oldscore),
                          s.@score_map+=(s->((1.0-damping) + damping *s.@received_score_map.get(s)))
                      END,
                      FOREACH (key,value) IN s.@received_score_map DO
                          IF key!=s THEN
                              FLOAT oldscore = s.@score_map.get(key),
                              s.@score_map+=(key->-oldscore),
                              s.@score_map+=(key->damping*value),
                              IF damping*value-oldscore<0.001 THEN
                                  @@end_set+=getvid(key)
                              END
                          END
                      END,
                      s.@received_score_map.clear();
         Total=Total UNION T;

      END;

      Total = SELECT s
              FROM Total:s
              POST-ACCUM
                  FOREACH (key,value) IN s.@score_map DO
                      @@res_map+=(key->Vertex_Score(s,value))
                  END,
                  s.@score_map.clear(),s.@received_score_map.clear();
      @@end_set.clear();
  END;
  All = SELECT s
        FROM All:s
        POST-ACCUM
            FOREACH i in @@res_map.get(s) DO
                s.@top_scores_heap+=i
            END,
            IF file_path != "" THEN
                f.println(s, s.@top_scores_heap)
            END;
  IF print_results THEN
      PRINT All [All.@top_scores_heap];
  END;
}
