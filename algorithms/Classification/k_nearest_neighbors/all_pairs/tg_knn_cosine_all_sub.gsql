CREATE QUERY tg_knn_cosine_all_sub (VERTEX source, SET<STRING> e_type, SET<STRING> re_type, STRING weight, 
  STRING label, INT top_k) RETURNS (STRING)  SYNTAX V1 {

/* This subquery is k-nearest neighbors based on Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
*/
    SumAccum<FLOAT> @sum_numerator, @@sum_norm1, @sum_norm2, @sum_similarity;
    MapAccum<STRING, INT> @@count_map;
    INT max_count = 0;
    STRING predicted_label;

    # calculate similarity and find the top k nearest neighbors
    start = {source};
    subjects = SELECT t
               FROM start:s -(e_type:e)- :t
               ACCUM t.@sum_numerator = e.getAttr(weight, "FLOAT"),
                     @@sum_norm1 += pow(e.getAttr(weight, "FLOAT"), 2);

    neighbours = SELECT t
                 FROM subjects:s -(re_type:e)- :t
                 WHERE t != source AND t.getAttr(label, "STRING") != ""    # only consider the ones with known label
                 ACCUM t.@sum_numerator += s.@sum_numerator * e.getAttr(weight, "FLOAT");

    kNN = SELECT s
          FROM neighbours:s -(e_type:e)- :t
          ACCUM s.@sum_norm2 += pow(e.getAttr(weight, "FLOAT"), 2)
          POST-ACCUM s.@sum_similarity = s.@sum_numerator/sqrt(@@sum_norm1 * s.@sum_norm2)
          ORDER BY s.@sum_similarity DESC
          LIMIT top_k;

    #predict label
    kNN = SELECT s
          FROM kNN:s
          ACCUM @@count_map += (s.getAttr(label, "STRING") -> 1);

    FOREACH (pred_label, cnt) IN @@count_map DO
        IF cnt > max_count THEN
            max_count = cnt;
            predicted_label = pred_label;
        END;
    END;

    PRINT predicted_label;
    RETURN predicted_label;

}
