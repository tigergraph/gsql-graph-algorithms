CREATE QUERY tg_knn_cosine_cv_sub (VERTEX source, SET<STRING> e_type, SET<STRING> re_type, STRING v_label, STRING weight, INT max_k) RETURNS (ListAccum<STRING>)  SYNTAX V1 {

  /* This subquery returns a list of predicted label for a source vertex with respect to different k within a given range. 
*/ 
    TYPEDEF TUPLE <label STRING, similarity FLOAT> Label_Score;
    HeapAccum<Label_Score>(max_k, similarity DESC) @@top_labels_heap;  # heap stores the (label, similarity) tuple, order by similarity score
    SumAccum<FLOAT> @sum_numerator, @@sum_norm1, @sum_norm2, @sum_similarity;
    MapAccum<STRING, INT> @@count_map;
    ListAccum<STRING> @@predicted_label_list;  # list of predicted labels to return
    INT max_count = 0;
    STRING predicted_label;   # predicted label in each iteration
    INT k;

    # calculate similarity and find the top k nearest neighbors
    start = {source};
    subjects = SELECT t
               FROM start:s -(e_type:e)-> :t
               ACCUM t.@sum_numerator = e.getAttr(weight, "FLOAT"),
                     @@sum_norm1 += pow(e.getAttr(weight, "FLOAT"), 2);

    neighbours = SELECT t
                 FROM subjects:s -(re_type:e)-> :t
                 WHERE t != source AND t.getAttr(v_label, "STRING") != ""    
		 # only consider the neighbors with known label
                 ACCUM t.@sum_numerator += s.@sum_numerator * e.getAttr(weight, "FLOAT");

    kNN = SELECT s
          FROM neighbours:s -(e_type:e)-> :t
          ACCUM s.@sum_norm2 += pow(e.getAttr(weight, "FLOAT"), 2)
          POST-ACCUM @@top_labels_heap += Label_Score(s.getAttr(v_label, "STRING"), s.@sum_numerator/sqrt(@@sum_norm1 * s.@sum_norm2)); 
	  # store the label and similarity score in a heap 

    # iterate the heap and calculate label count for different k
    k = 1;
    FOREACH item IN @@top_labels_heap DO  
        @@count_map += (item.label -> 1);   # count is a map, key is the label, value is the count of the label
        IF @@count_map.get(item.label) > max_count THEN
            max_count = @@count_map.get(item.label);
            predicted_label = item.label;
        END;
        @@predicted_label_list += predicted_label;  # list of predicted labels
        k = k+1;
    END;
      
    PRINT @@predicted_label_list;
    RETURN @@predicted_label_list;
}
