CREATE QUERY tg_knn_cosine_ss (VERTEX source, SET<STRING> v_type, SET<STRING> e_type, SET<STRING> re_type, STRING weight, 
  STRING label, INT top_k, BOOL print_accum = TRUE, STRING file_path = "", STRING attr = "") RETURNS (STRING)  SYNTAX V1 {

/* This query is k-nearest neighbors based on Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
The output is the predicted label for the source vertex, which is the majority label of its k-nearest neighbors. 
*/
  SumAccum<FLOAT> @sum_numerator, @@sum_norm1, @sum_norm2, @sum_similarity;
  MapAccum<STRING, INT> @@labels_count_map;
  FILE f(file_path);
  INT max_count = 0;
  STRING predicted_label;
  # calculate similarity and find the top k nearest neighbors
  start = {source};
  subjects = SELECT t
             FROM start:s -(e_type:e)- :t
             ACCUM t.@sum_numerator = e.getAttr(weight, "FLOAT"),
                   @@sum_norm1 += pow(e.getAttr(weight, "FLOAT"), 2);
  neighbours = SELECT t
               FROM subjects:s -(re_type:e)- :t
               WHERE t != source AND t.getAttr(label, "STRING") != ""    
               # only consider the neighbours with known label
               ACCUM t.@sum_numerator += s.@sum_numerator * e.getAttr(weight, "FLOAT");
  kNN = SELECT s
        FROM neighbours:s -(e_type:e)- :t
        ACCUM s.@sum_norm2 += pow(e.getAttr(weight, "FLOAT"), 2)
        POST-ACCUM s.@sum_similarity = s.@sum_numerator/sqrt(@@sum_norm1 * s.@sum_norm2)
        ORDER BY s.@sum_similarity DESC
        LIMIT top_k; 
        
  #predict label
  kNN = SELECT s
        FROM kNN:s
        ACCUM @@labels_count_map += (s.getAttr(label, "STRING") -> 1);
        
  FOREACH (pred_label, cnt) IN @@labels_count_map DO
      IF cnt > max_count THEN
          max_count = cnt;
          predicted_label = pred_label;
      END;
  END;
  
  IF attr != "" THEN
      start = SELECT s
              FROM start:s
              POST-ACCUM s.setAttr(attr, predicted_label);
  END;
        
  IF print_accum THEN
      PRINT predicted_label;
  END;
  
  IF file_path != "" THEN
      f.println(source, predicted_label);
  END;
 
  RETURN predicted_label;
}
