CREATE QUERY tg_label_prop (SET<STRING> v_type, SET<STRING> e_type, INT max_iter, INT output_limit, 
  BOOL print_accum = TRUE, STRING file_path = "", STRING attr = "")  SYNTAX V1 {

# Partition the vertices into communities, according to the Label Propagation method.
# Indicate community membership by assigning each vertex a community ID.

OrAccum @@or_changed = true;
MapAccum<INT, INT> @map;     # <communityId, numNeighbors>
MapAccum<INT, INT> @@comm_sizes_map;   # <communityId, members>
SumAccum<INT> @sum_label, @sum_num;  
FILE f (file_path);
Start = {v_type};

# Assign unique labels to each vertex
Start = SELECT s 
        FROM Start:s 
        ACCUM s.@sum_label = getvid(s);

# Propagate labels to neighbors until labels converge or the max iterations is reached
WHILE @@or_changed == true LIMIT max_iter DO
    @@or_changed = false;
    Start = SELECT s 
            FROM Start:s -(e_type:e)- :t
            ACCUM t.@map += (s.@sum_label -> 1)  # count the occurrences of neighbor's labels
            POST-ACCUM
                INT max_v = 0,
                INT label = 0,
                # Iterate over the map to get the neighbor label that occurs most often
                FOREACH (k,v) IN t.@map DO
                    CASE WHEN v > max_v THEN
                        max_v = v,
                        label = k
                    END
                END,
                # When the neighbor search finds a label AND it is a new label
                # AND the label's count has increased, update the label.
                CASE WHEN label != 0 AND t.@sum_label != label AND max_v > t.@sum_num THEN
                    @@or_changed += true,
                    t.@sum_label = label,
                    t.@sum_num = max_v
                END,
                t.@map.clear();
END;

Start = {v_type};
Start =  SELECT s 
         FROM Start:s
         POST-ACCUM 
             IF attr != "" THEN 
                 s.setAttr(attr, s.@sum_label) 
             END,
               
             IF file_path != "" THEN 
                 f.println(s, s.@sum_label) 
             END,
               
             IF print_accum THEN 
                 @@comm_sizes_map += (s.@sum_label -> 1) 
             END
         LIMIT output_limit;

IF print_accum THEN 
    PRINT @@comm_sizes_map;
    PRINT Start[Start.@sum_label];
END;
}
