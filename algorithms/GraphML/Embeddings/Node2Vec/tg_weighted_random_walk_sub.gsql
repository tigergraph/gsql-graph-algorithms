CREATE QUERY tg_weighted_random_walk_sub(VERTEX source, INT length, INT num_walks, FLOAT p, FLOAT q, FILE f)  SYNTAX V1 {

  /* This query impletemented random walk in Node2vec paper. Link: https://cs.stanford.edu/~jure/pubs/node2vec-kdd16.pdf
  Input: source vertex, random walk length, walk times for each vertex, output file, set of valid edge types
  Output: random walk sequence
  */

  SetAccum<VERTEX> @@pick_set;
  ListAccum<FLOAT> @@prob_list;
  ListAccum<VERTEX> @@candidates_list;
  ListAccum<VERTEX>@@path_list;
  FLOAT Prob;
  SumAccum<INT> @sum_d_tx = 2;
  SumAccum<FLOAT>@sum_score;


  FOREACH i in RANGE[0,num_walks-1] DO
      // add source vertex into path
      @@path_list += source;
      Start = {source};

      WHILE(Start.size()>=0 ) LIMIT length DO
          // Calculate transition probability
          Start = SELECT s
                  FROM Start:s-(:e)-:t
                  POST-ACCUM
                      IF t.@sum_d_tx ==0 THEN
                          t.@sum_score = (1/p) //* e.score
                      ELSE IF t.@sum_d_tx == 1 THEN
                          t.@sum_score = 1 //t.score
                      ELSE
                          t.@sum_score = (1/q) //* e.score
                      END;
          // Reset candidates @d_tx =2, start vertex @d_dx = 0
          // store score and vertex of candidates
          candidates = SELECT t
                       FROM Start:s-(:e)-:t
                       ACCUM t.@sum_d_tx = 2, s.@sum_d_tx = 0
                       POST-ACCUM @@prob_list +=t.@sum_score,
		                  @@candidates_list +=t;

          IF candidates.size() == 0 THEN
              @@path_list += source;
              continue;
          END;
          // generate prob value based on weight distribution
          Prob = tg_random_distribution(@@prob_list);
          //print Prob;
          // pick vertex that generated by random function
          @@path_list += @@candidates_list.get(Prob);
          @@pick_set += @@candidates_list.get(Prob);

          //print @@pick;
          // select the vertex that connected with @@pick in candidates and set @d_tx=1
          sel = SELECT s
                FROM candidates:s-(:e)-:t
                WHERE t == @@candidates_list.get(Prob)
                POST-ACCUM s.@sum_d_tx =1;

          // select @@pick as the next start vertex
          Start = @@pick_set;

          // clear accumulators to start next iteration
          @@pick_set.clear();
          @@prob_list.clear();
          @@candidates_list.clear();
      END;  // WHILE
      PRINT @@path_list;
      f.println(@@path_list);
      @@path_list.clear();
  END; // FOREACH
}
