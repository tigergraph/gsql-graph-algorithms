CREATE QUERY tg_cycle_detection (SET<STRING> v_type, SET<STRING> e_type, INT depth, BOOL print_accum = TRUE, STRING file_path = "")  SYNTAX V1 {

/* Rochaâ€“Thatte cycle detection algorithm
This is a distributed algorithm for detecting all the cycles on large-scale directed graphs.In every iteration, the vertices send its sequences to its out-neighbors, and receive the sequences from the in-neighbors.
Stop passing the sequence (v1,v2,v3, ...) when:
1. v = v1. If v has the minimum label in the sequence, report the cycle
2. v = vi (i!=1). Do not report since this cycle is already reported in an earlier iteration
*/
  ListAccum<ListAccum<VERTEX>> @curr_list, @new_list;
  ListAccum<ListAccum<VERTEX>> @@cycles_list;
  SumAccum<INT> @sum_uid;
  FILE f (file_path);
  
  # initialization
  Active = {v_type};
  Active = SELECT s 
           FROM Active:s
           ACCUM s.@curr_list = [s];
  
  WHILE Active.size() > 0 LIMIT depth DO 
      Active = SELECT t 
               FROM Active:s -(e_type:e)- :t
               ACCUM 
                   FOREACH sequence IN s.@curr_list DO
                       BOOL t_is_min = TRUE, 
                       IF t == sequence.get(0) THEN  # cycle detected
                           FOREACH v IN sequence DO
                               IF getvid(v) < getvid(t) THEN
                                   t_is_min = FALSE,
                                   BREAK
                               END
                           END,
                           IF t_is_min == TRUE THEN  # if it has the minimal label in the list, report 
                               IF print_accum THEN 
                                   @@cycles_list += sequence 
                               END,
                               IF file_path != "" THEN 
                                   f.println(sequence) 
                               END
                           END
                       ELSE IF sequence.contains(t) == FALSE THEN   # discard the sequences contain t
                           t.@new_list += [sequence + [t]]   # store sequences in @newList to avoid confliction with @currList
                       END
                  END
              POST-ACCUM s.@curr_list.clear();
      Active = SELECT t FROM Active:t    
              POST-ACCUM t.@curr_list = t.@new_list,
                         t.@new_list.clear()
              HAVING t.@curr_list.size() > 0;  # IF receive no sequences, deactivate it;
  END;

  IF print_accum THEN
      PRINT @@cycles_list as cycles;
  END;  
}
