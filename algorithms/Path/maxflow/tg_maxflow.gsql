CREATE QUERY tg_maxflow(VERTEX source, VERTEX sink, Set<STRING> v_type, SET<STRING> e_type, 
       SET<STRING> reverse_e_type, STRING cap_attr, STRING cap_type, FLOAT min_flow_threshhold = 0.001, 
       BOOL print_accum = TRUE, BOOL display_edges = TRUE, BOOL spit_to_file = FALSE, 
       STRING file_path = "/home/tigergraph/tg_query_output.csv"){ 
  
  /*
   Maxflow algorithm. Finds the maximum amount of flow that source can pushes to sink

   source: start vertex to  every other vertex.     cap_type: capacity data type (UINT, INT,FLOAT,DOUBLE)
   sink:   end vertex                               min_flow_threshhold: smallest epsilon for flow
   v_type: vertex types to traverse                 print_accum: print JSON output
   e_type: edge types to traverse                   display_edges: output edges for visualization
   reverse_e_type: reverse edge of e_type           spit_to_file: spit output to file
   cap_attr: attribute for edge capacity            file_path: file to write CSV output to
     
  */
         
  TYPEDEF TUPLE<INT prev_flow, BOOL is_forward, VERTEX prev> tb_node;
  GroupByAccum<VERTEX source, VERTEX targ, SumAccum<FLOAT> flow> @@flow_accum;
  SetAccum<VERTEX> @@curr;
  SetAccum<EDGE> @@edges;
  HeapAccum<tb_node>(1, prev_flow DESC) @traceback;
                              
  MaxAccum<FLOAT> @@cap_threshold;
  SumAccum<FLOAT> @@maxflow = 0;
  MinAccum<FLOAT> @@minflow;
  OrAccum @is_visited, @@is_found;
  BOOL minimum_reached = FALSE;
	FILE f(file_path);
  @@cap_threshold = min_flow_threshhold;
         
  IF cap_type NOT IN ("UINT", "INT", "FLOAT", "DOUBLE") THEN
		PRINT "wt_type must be UINT, INT, FLOAT, or DOUBLE" AS errMsg;
		RETURN;
	END;    
  
  ##### Initialize #####
  init = {v_type};       
  init = SELECT s
         FROM init:s - (e_type:e) -> v_type:t
         ACCUM 
          FLOAT fl = 0,
          CASE cap_type
            WHEN "UINT" THEN
					    fl = e.getAttr(cap_attr, "UINT")
            WHEN "INT" THEN
					    fl = e.getAttr(cap_attr, "INT")
            WHEN "FLOAT" THEN
              fl = e.getAttr(cap_attr, "FLOAT")
            WHEN "DOUBLE" THEN
              fl = e.getAttr(cap_attr, "DOUBLE")
          END,
          @@flow_accum += (s, t -> 0),
          IF s == source THEN @@cap_threshold += fl END;

  @@cap_threshold = pow(3, float_to_int(log(@@cap_threshold)/log(3)));
  
  ##### Push one flow at a time until there is residudal graph is disconneccted #####
  WHILE TRUE DO
    //initilize 
    init = {node.*};
    init = SELECT s
           FROM init:s
           POST-ACCUM s.@is_visited = FALSE,
                      s.@traceback = tb_node(GSQL_INT_MIN, FALSE, source);
    
    start = {source};
    start = SELECT s 
            FROM start:s 
            POST-ACCUM s.@is_visited = TRUE;
  
    @@is_found = False;
    
    //BFS to find feasible path from source -> sink
    WHILE NOT @@is_found AND start.size() > 0 DO
      forwd = SELECT t
              FROM start:s - (e_type:e) -> v_type:t
              WHERE NOT t.@is_visited
              ACCUM 
                FLOAT fl = 0,
                  CASE cap_type
                    WHEN "UINT" THEN
					            fl = e.getAttr(cap_attr, "UINT")
                    WHEN "INT" THEN
					            fl = e.getAttr(cap_attr, "INT")
                    WHEN "FLOAT" THEN
                      fl = e.getAttr(cap_attr, "FLOAT")
                    WHEN "DOUBLE" THEN
                      fl = e.getAttr(cap_attr, "DOUBLE")
                  END,
                  
                  IF fl - @@flow_accum.get(s, t).flow >= @@cap_threshold THEN
                    t.@traceback += tb_node(fl - @@flow_accum.get(s, t).flow, TRUE, s),
                    t.@is_visited += TRUE,
                    @@is_found += t == sink
                  END
            HAVING t.@is_visited;
  
      bacwd = SELECT t
              FROM start:s - (reverse_e_type) -> v_type:t
              WHERE NOT t.@is_visited
              ACCUM 
                 IF @@flow_accum.get(t, s).flow >= @@cap_threshold THEN
                    t.@traceback += tb_node(@@flow_accum.get(t, s).flow, FALSE, s),
                    t.@is_visited += TRUE,
                    @@is_found += t == sink
                 END
              HAVING t.@is_visited;
  
      start = forwd UNION bacwd;
    END;
    
    //done when residual graph is disconnected                           
    IF NOT @@is_found AND minimum_reached THEN
      BREAK;
    END;  
    
    //reduce cap_threshold to look for more path options
    IF NOT @@is_found THEN
      @@cap_threshold = float_to_int(@@cap_threshold/3);
      IF @@cap_threshold < min_flow_threshhold THEN 
        @@cap_threshold = min_flow_threshhold; 
        minimum_reached = TRUE; 
      END;
                               
      CONTINUE;
    END;
    
    //find bottleneck 
    @@curr.clear();
    @@curr += sink;
    @@minflow = GSQL_INT_MAX;
    
    WHILE NOT @@curr.contains(source) DO
      start = @@curr;
      @@curr.clear();
      start = SELECT s 
              FROM start:s
              POST-ACCUM @@minflow += s.@traceback.top().prev_flow,
                         @@curr += s.@traceback.top().prev;
    
    END;
  
    @@maxflow += @@minflow;
    
   //traceback to source and update flow vertices
    @@curr.clear();
    @@curr += sink;
    WHILE NOT @@curr.contains(source) DO
      start = @@curr;
      @@curr.clear();
      start = SELECT s 
              FROM start:s
              POST-ACCUM @@curr += s.@traceback.top().prev, 
                         CASE 
                          WHEN s.@traceback.top().is_forward THEN
                               @@flow_accum += (s.@traceback.top().prev, s -> @@minflow)
                          ELSE @@flow_accum += (s, s.@traceback.top().prev -> -@@minflow)
                         END;
    END;
  END;
  ##### Output #####
	IF file_path != "" THEN
    f.println("Maxflow: " + to_string(@@maxflow));
	  f.println("From","To","Flow");
	END;
                              
  start = {source};
  WHILE start.size() != 0 DO
    start = SELECT t
            FROM start:s - (e_type:e) - v_type:t
            WHERE @@flow_accum.get(s,t).flow >= min_flow_threshhold 
            ACCUM
              IF print_accum THEN @@edges += e END,
              IF file_path != "" THEN f.println(s, t, @@flow_accum.get(s,t).flow) END;

  END;
  
  IF print_accum THEN
    PRINT @@maxflow;
    IF display_edges THEN
      PRINT @@edges; 
    END;
  END;

}