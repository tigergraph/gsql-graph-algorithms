CREATE QUERY tg_msf (SET<STRING> v_type, SET<STRING> e_type, STRING wt_attr, STRING wt_type,
	BOOL print_accum = TRUE, STRING result_attr = "", STRING file_path = "")  SYNTAX V1 {

  /*
  * This query identifies minimum spanning trees using the algorithm in section 6.2 of Qin et al. 2014:
  * http://www-std1.se.cuhk.edu.hk/~hcheng/paper/SIGMOD2014qin.pdf.
 
  Parameters:
  v_type: vertex types to traverse                print_accum: print JSON output
  e_type: edge types to traverse                  result_attr: INT attr to store results to
  wt_attr: attribute for edge weights             file_path: file to write CSV output to
  wt_type: weight data type (INT,FLOAT,DOUBLE)
  */
  
  TYPEDEF TUPLE <FLOAT weight, VERTEX from_v, VERTEX to_v, EDGE e, INT vid> EDGE_WEIGHT;
  MapAccum<VERTEX, VERTEX> @@parents_map;
  MapAccum<VERTEX, AndAccum<BOOL>> @@star_map;
  SumAccum<INT> @@sum_parent_changed_count;
  SetAccum<EDGE> @@result_set;
  SetAccum<EDGE_WEIGHT> @@mst_set;
  HeapAccum<EDGE_WEIGHT>(1, weight ASC, to_v ASC, vid ASC) @ew_heap;
  MinAccum<VERTEX> @min_parent; # Given a vertex v, we need to be able to send its outgoing edge info to its parent, which is only posible if we store the parent in a local accumulator.
  OrAccum @or_ignore;
  FILE f (file_path);
        
  # Check wt_type parameter
  IF wt_type NOT IN ("INT", "FLOAT", "DOUBLE") THEN
      PRINT "wt_type must be INT, FLOAT, or DOUBLE" AS errMsg;
      RETURN;
  END;
  all_v = {v_type};
  ### FOREST INITIALIZATION ###
  # For each node v, let parent p(v) = neighbor of v connected via the least-weighted edge.
  all_v = SELECT v 
          FROM all_v:v -(e_type:e)- :u
          ACCUM
	      CASE wt_type
	          WHEN "INT" THEN
		      v.@ew_heap += EDGE_WEIGHT(e.getAttr(wt_attr, "INT"), v,u,e, getvid(u))
		  WHEN "FLOAT" THEN
		      v.@ew_heap += EDGE_WEIGHT(e.getAttr(wt_attr, "FLOAT"), v,u,e, getvid(u))
		  WHEN "DOUBLE" THEN
		      v.@ew_heap += EDGE_WEIGHT(e.getAttr(wt_attr, "DOUBLE"), v,u,e, getvid(u))
		  END			
	  POST-ACCUM
	      @@parents_map += (v -> v.@ew_heap.top().to_v),
	      @@sum_parent_changed_count += 1;

  WHILE @@sum_parent_changed_count > 0 DO
      ### BREAK CYCLES ###
      all_v = SELECT v
              FROM all_v:v
	      POST-ACCUM v.@or_ignore = false;
	  
      all_v = SELECT v 
              FROM all_v:v
	      POST-ACCUM
	          VERTEX p = @@parents_map.get(v),
	          VERTEX gp = @@parents_map.get(p),
	          IF v != p AND v == gp THEN
	              IF (getvid(v) < getvid(p)) THEN
		          @@parents_map += (v -> v),
		          v.@or_ignore = TRUE
		      END
	          END;

      # only add edges to MST after breaking cycles to avoid double counting edges
      add_edges = SELECT v 
                  FROM all_v:v 
	          WHERE v.@or_ignore == false AND v.@ew_heap.size() > 0
	          POST-ACCUM
	              IF file_path != "" THEN 
		          @@mst_set += v.@ew_heap.top() 
		      END,
	              IF print_accum OR result_attr != "" THEN 
		          @@result_set += v.@ew_heap.top().e 
		      END;
      ### UPDATE PARENT POINTERS ###
      @@sum_parent_changed_count = 0;
      all_v = SELECT v 
              FROM all_v:v
	      POST-ACCUM
	          VERTEX p = @@parents_map.get(v),
	          VERTEX gp = @@parents_map.get(p),
	          IF (p != gp) THEN
	              @@sum_parent_changed_count += 1,
		      @@parents_map += (v -> gp)
	          END;
      IF @@sum_parent_changed_count == 0 THEN
          BREAK;
      END;

      ### STAR DETECTION ###
      @@star_map.clear();
      # Rule 1: Let s(v) = 1 if p(v) = p(p(v))
      # Only root and depth 1 vertices will have s(v) = 1. Everything else will have s(v) = 0.
      all_v = SELECT v 
              FROM all_v:v
	      POST-ACCUM
                  VERTEX parent = @@parents_map.get(v),
	          IF parent == @@parents_map.get(parent) THEN
	              @@star_map += (v -> true)
	          ELSE
		      @@star_map += (v -> false)
	          END;

      # Rule 2: If s(v) = 1 but v has a grandchild u such that s(u) = 0, then s(v) = 0. This will end up updating root vertices. 
      not_star_roots = SELECT u 
                       FROM all_v:u
		       WHERE @@star_map.get(u) == false
		       POST-ACCUM
		           @@star_map += (@@parents_map.get(@@parents_map.get(u)) -> false);

      # Rule 3: If s(p(v)) = 0, then s(v) = 0. This will end up updating vertices at depth 1 of trees.
      not_star_depth1 = SELECT u 
                        FROM all_v:u
		        WHERE @@star_map.get(@@parents_map.get(u)) == false
		        POST-ACCUM
		            @@star_map += (u -> false);

      ### STAR HOOKING ###
      # First, we need to clear each vertex's heap and reset the local @parent.
      all_v = SELECT v 
              FROM all_v:v
	      POST-ACCUM
	          v.@ew_heap.clear(),
	          v.@min_parent = @@parents_map.get(v);
	      
      star_nodes = SELECT v 
                   FROM all_v:v -(e_type:e)- :u
	           WHERE @@star_map.get(v) == true AND v.@min_parent != u.@min_parent
	           ACCUM
	               VERTEX parent = v.@min_parent,
	               CASE wt_type
		           WHEN "INT" THEN
		               parent.@ew_heap += EDGE_WEIGHT(e.getAttr(wt_attr, "INT"), v,u,e, getvid(u))
		           WHEN "FLOAT" THEN
		    	       parent.@ew_heap += EDGE_WEIGHT(e.getAttr(wt_attr, "FLOAT"), v,u,e, getvid(u))
		           WHEN "DOUBLE" THEN
			       parent.@ew_heap += EDGE_WEIGHT(e.getAttr(wt_attr, "DOUBLE"), v,u,e, getvid(u))
		           END;
		       
      updated_star_roots = SELECT v 
                           FROM all_v:v
		           WHERE @@star_map.get(v) == true AND @@parents_map.get(v) == v AND v.@ew_heap.size() > 0
		           POST-ACCUM
		               @@parents_map += (v -> @@parents_map.get(v.@ew_heap.top().to_v));
  END;
  IF result_attr != "" THEN
      all_v = SELECT v 
              FROM all_v:v -(e_type:e)- :u
              ACCUM
	          IF e IN @@result_set THEN
	              e.setAttr(result_attr, TRUE)
	          ELSE
		      e.setAttr(result_attr, FALSE)
	          END;
  END;

  IF print_accum THEN
      PRINT @@result_set;
  END;

  IF file_path != "" THEN
      f.println("From", "To", "Weight");
      FOREACH e IN @@mst_set DO
          f.println(e.from_v, e.to_v, e.weight);
      END;
  END;
}
