CREATE DISTRIBUTED QUERY tg_shortest_ss_no_wt (VERTEX source, SET<STRING> v_type_set, SET<STRING> e_type_set, 
  INT print_limit = -1, BOOL print_results =TRUE, STRING result_attribute ="", STRING file_path ="",
  BOOL display_edges =FALSE)  SYNTAX V1 {

    /*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Path

    Maturity:
        production

    Description: 
        Single-source shortest path algorithm, with unweighted edges.
        From the source vertex, finds the unweighted shortest path (number of hops, INT value)

    Publications:
        NA

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/pathfinding-algorithms/single-source-shortest-path-unweighted

    Parameters:
        source:
            start vertex
        print_results:
            If True, print JSON output
        v_type_set:
            vertex types to traverse
        result_attribute:
            INT attribute to store results to
        e_type_set:
            edge types to traverse
        file_path:
            file to write CSV output to
        print_limit:
            max #vertices to output
        display_edges:
            output edges for visualization
    */

  FILE f(file_path);
  MinAccum<INT> @min_dis;
  OrAccum @or_visited;
  ListAccum<VERTEX> @path_list;
  SetAccum<EDGE> @@edge_set;

  ##### Initialization  #####
  Source = {source};
  Source = SELECT s 
           FROM Source:s
	   ACCUM s.@or_visited += true, 
	         s.@min_dis = 0,
		 s.@path_list = s; 
  ResultSet = {source};

  ##### Calculate distances and paths #####
  WHILE(Source.size()>0) DO
      Source = SELECT t
	       FROM Source:s -(e_type_set:e)- v_type_set:t
	       WHERE t.@or_visited == false
	       ACCUM t.@min_dis += s.@min_dis + 1,
	             t.@path_list = s.@path_list + [t],
	             t.@or_visited += true
      ORDER BY getvid(t);
      ResultSet = ResultSet UNION Source;
  END;

  IF file_path != "" THEN
      f.println("Vertex_ID","Distance","Shortest_Path");
  END;

  ResultSet = SELECT s 
              FROM ResultSet:s 
              POST-ACCUM 
                  IF result_attribute != "" 
		      THEN s.setAttr(result_attribute, s.@min_dis) 
		  END,
                  IF file_path != "" THEN 
		      f.println(s, s.@min_dis, s.@path_list)
		  END;
  
  IF print_results THEN
      IF print_limit >= 0 THEN
          ResultSet = SELECT s 
	              FROM ResultSet:s 
		      LIMIT print_limit;
      END;
      PRINT ResultSet[ResultSet.@min_dis, ResultSet.@path_list];
      IF display_edges THEN
          ResultSet = SELECT s 
	              FROM ResultSet:s -(e_type_set:e)- v_type_set:t
                      ACCUM @@edge_set += e;
          PRINT @@edge_set;
      END;
  END;
}
