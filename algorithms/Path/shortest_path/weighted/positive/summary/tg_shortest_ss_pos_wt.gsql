CREATE DISTRIBUTED QUERY tg_shortest_ss_pos_wt (VERTEX source, SET<STRING> v_type_set, SET<STRING> e_type_set,
 STRING weight_attribute, STRING weight_type, FLOAT epsilon = 0.001,BOOL print_results = TRUE, INT print_limit = -1, 
 BOOL display_edges = FALSE, STRING result_attribute = "", 
 STRING file_path = "")  SYNTAX V1 {

    /*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Path

    Maturity:
        production

    Description: 
        Single-source shortest path algorithm, with positive weight edges.
        From the source vertex, finds the weighted shortest path (FLOAT value).

    Publications:
        NA

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/pathfinding-algorithms/single-source-shortest-path-weighted

    Parameters:
        source:
            start vertex
        print_results:
            If True, print JSON output
        v_type_set:
            vertex types to traverse
        print_limit:
            max #vertices to output
        e_type_set:
            edge types to traverse
        display_edges:
            output edges for visualization
        weight_attribute:
            attribute for edge weights
        result_attribute:
            INT attribute to store results to
        weight_type:
            weight data type (INT,FLOAT,DOUBLE)
        epsilon:
            min delta weight
        file_path:
            file to write CSV output to
    */

  MinAccum<FLOAT> @min_path = GSQL_INT_MAX;       # retain 1 shortest path
  MinAccum<FLOAT> @min_prev_path = -1;
  OrAccum @or_is_candidate = FALSE;
  SetAccum<EDGE> @@edge_set;
   
  FILE f(file_path);
   
  # Check weight_type parameter
  IF weight_type NOT IN ("UINT", "INT", "FLOAT", "DOUBLE") THEN
      PRINT "weight_type must be UINT, INT, FLOAT, or DOUBLE" AS errMsg;
      RETURN;
  END;

  ##### Initialize #####
  start = {source};
  start = SELECT s 
          FROM start:s
          POST-ACCUM s.@min_path = 0;
   
  ##### Do maximum N-1 iterations: Consider whether each edge lowers the best-known distance.
  WHILE start.size() != 0 DO 
      start = SELECT t
              FROM start:s -(e_type_set:e)- v_type_set:t
	      ACCUM 
                  t.@or_is_candidate = FALSE,
                  CASE weight_type
                      WHEN "UINT" THEN
		          t.@min_path += s.@min_path + e.getAttr(weight_attribute, "UINT")
                      WHEN "INT" THEN
		          t.@min_path += s.@min_path + e.getAttr(weight_attribute, "INT")
                      WHEN "FLOAT" THEN
                          t.@min_path += s.@min_path + e.getAttr(weight_attribute, "FLOAT")
                      WHEN "DOUBLE" THEN
                          t.@min_path += s.@min_path + e.getAttr(weight_attribute, "DOUBLE")
                      END
             POST-ACCUM
                 IF abs(t.@min_prev_path - t.@min_path) > epsilon THEN
                     t.@or_is_candidate = TRUE,
                     t.@min_prev_path = t.@min_path
                 END
       HAVING t.@or_is_candidate;

  END;
  ##### Output #####
  component = {v_type_set};
  component = SELECT s 
              FROM component:s
              WHERE s.@min_prev_path != -1
              POST-ACCUM 
	          IF result_attribute != "" THEN 
		      s.setAttr(result_attribute, s.@min_path) 
		  END,  
                  IF file_path != "" THEN 
		      f.println(s, s.@min_path) 
		  END;
   
  IF print_results THEN
      IF print_limit >= 0 THEN
          component = SELECT s 
	              FROM component:s 
		      LIMIT print_limit;
      END;
   
      PRINT component[component.@min_path as cost];
      IF display_edges THEN
          tmp = SELECT s
		FROM component:s -(e_type_set:e)- v_type_set:t
	        ACCUM @@edge_set += e;
          PRINT @@edge_set;
      END;
   END;
}
