CREATE QUERY tg_shortest_ss_pos_wt (VERTEX source, SET<STRING> v_type, SET<STRING> e_type,
 STRING wt_attr, STRING wt_type, FLOAT epsilon = 0.001,BOOL print_accum = TRUE, INT output_limit = -1, 
 BOOL display_edges = FALSE, STRING result_attr = "", BOOL spit_to_file = FALSE, 
 STRING file_path = "/home/tigergraph/tg_query_output.csv")  SYNTAX V1 {

/*
 Single-source shortest path algorithm, with positive weight edges.
 From the source vertex, finds the weighted shortest path (FLOAT value).

 source: start vertex to  every other vertex.     print_accum: print JSON output
 v_type: vertex types to traverse                 output_limit: max #vertices to output
 e_type: edge types to traverse                   display_edges: output edges for visualization
 wt_attr: attribute for edge weights              result_attr: INT attr to store results to
 wt_type: weight data type (INT,FLOAT,DOUBLE)     spit_to_file: spit data to file 
 epsilon: min delta weight                        file_path: file to write CSV output to
*/

  MinAccum<FLOAT> @min_path = GSQL_INT_MAX;       # retain 1 shortest path
  MinAccum<FLOAT> @min_prev_path = -1;
  OrAccum @or_is_candidate = FALSE;
  SetAccum<EDGE> @@edge_set;
   
  FILE f(file_path);
   
  # Check wt_type parameter
  IF wt_type NOT IN ("UINT", "INT", "FLOAT", "DOUBLE") THEN
      PRINT "wt_type must be UINT, INT, FLOAT, or DOUBLE" AS errMsg;
      RETURN;
  END;

  ##### Initialize #####
  start = {source};
  start = SELECT s 
          FROM start:s
          POST-ACCUM s.@min_path = 0;
   
  ##### Do maximum N-1 iterations: Consider whether each edge lowers the best-known distance.
  WHILE start.size() != 0 DO 
      start = SELECT t
              FROM start:s -(e_type:e)- v_type:t
	      ACCUM 
                  t.@or_is_candidate = FALSE,
                  CASE wt_type
                      WHEN "UINT" THEN
		          t.@min_path += s.@min_path + e.getAttr(wt_attr, "UINT")
                      WHEN "INT" THEN
		          t.@min_path += s.@min_path + e.getAttr(wt_attr, "INT")
                      WHEN "FLOAT" THEN
                          t.@min_path += s.@min_path + e.getAttr(wt_attr, "FLOAT")
                      WHEN "DOUBLE" THEN
                          t.@min_path += s.@min_path + e.getAttr(wt_attr, "DOUBLE")
                      END
             POST-ACCUM
                 IF abs(t.@min_prev_path - t.@min_path) > epsilon THEN
                     t.@or_is_candidate = TRUE,
                     t.@min_prev_path = t.@min_path
                 END
       HAVING t.@or_is_candidate;

  END;
  ##### Output #####
  component = {v_type};
  component = SELECT s 
              FROM component:s
              WHERE s.@min_prev_path != -1
              POST-ACCUM 
	          IF result_attr != "" THEN 
		      s.setAttr(result_attr, s.@min_path) 
		  END,  
                  IF spit_to_file THEN 
		      f.println(s, s.@min_path) 
		  END;
   
  IF print_accum THEN
      IF output_limit >= 0 THEN
          component = SELECT s 
	              FROM component:s 
		      LIMIT output_limit;
      END;
   
      PRINT component[component.@min_path as cost];
      IF display_edges THEN
          tmp = SELECT s
		FROM component:s -(e_type:e)- v_type:t
	        ACCUM @@edge_set += e;
          PRINT @@edge_set;
      END;
   END;
}
