CREATE QUERY tg_cosine_nbor_ss (VERTEX source, SET<STRING> e_type, SET<STRING> re_type, STRING weight, INT top_k, INT output_limit,
  BOOL print_accum = TRUE, STRING file_path = "", STRING similarity_edge = "") RETURNS (MapAccum<VERTEX, FLOAT>)  SYNTAX V1 {

  /* This query calculates the Cosine Similarity between a given vertex and every other vertex.
  Cosine similarity = A \dot B / ||A|| \dot ||B||
  */

  SumAccum<FLOAT> @sum_numerator, @@sum_norm1, @sum_norm2, @sum_similarity;
  MapAccum<VERTEX, FLOAT> @@top_k_result_map;
  FILE f (file_path);


  start = {source};
  subjects = SELECT t
             FROM start:s -(e_type:e)- :t
             ACCUM t.@sum_numerator = e.getAttr(weight, "FLOAT"),
                   @@sum_norm1 += pow(e.getAttr(weight, "FLOAT"), 2);

  neighbours = SELECT t
               FROM subjects:s -(re_type:e)-:t
               WHERE t != source
               ACCUM t.@sum_numerator += s.@sum_numerator * e.getAttr(weight, "FLOAT");

  neighbours = SELECT s
               FROM neighbours:s -(e_type:e)- :t
               ACCUM s.@sum_norm2 += pow(e.getAttr(weight, "FLOAT"), 2)
               POST-ACCUM s.@sum_similarity = s.@sum_numerator/sqrt(@@sum_norm1 * s.@sum_norm2)
               ORDER BY s.@sum_similarity DESC
               LIMIT top_k;

  neighbours = SELECT s
               FROM neighbours:s
               POST-ACCUM
                 IF similarity_edge != "" THEN
                     INSERT INTO EDGE similarity_edge VALUES(source, s, s.@sum_similarity)
                 END,

                 IF file_path != "" THEN
                     f.println(source, s, s.@sum_similarity)
                 END,
                 IF print_accum THEN
                     @@top_k_result_map += (s -> s.@sum_similarity)
                 END
               LIMIT output_limit;

  IF print_accum THEN
      PRINT neighbours[neighbours.@sum_similarity];
  END;

  RETURN @@top_k_result_map;
}
